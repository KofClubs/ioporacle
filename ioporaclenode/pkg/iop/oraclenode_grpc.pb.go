// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: oraclenode.proto

package iop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OracleNodeClient is the client API for OracleNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleNodeClient interface {
	SendDeal(ctx context.Context, in *SendDealRequest, opts ...grpc.CallOption) (*SendDealResponse, error)
	ValidateTransaction(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	ValidateBlock(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type oracleNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleNodeClient(cc grpc.ClientConnInterface) OracleNodeClient {
	return &oracleNodeClient{cc}
}

func (c *oracleNodeClient) SendDeal(ctx context.Context, in *SendDealRequest, opts ...grpc.CallOption) (*SendDealResponse, error) {
	out := new(SendDealResponse)
	err := c.cc.Invoke(ctx, "/iop.OracleNode/SendDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleNodeClient) ValidateTransaction(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/iop.OracleNode/ValidateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleNodeClient) ValidateBlock(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/iop.OracleNode/ValidateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleNodeServer is the server API for OracleNode service.
// All implementations must embed UnimplementedOracleNodeServer
// for forward compatibility
type OracleNodeServer interface {
	SendDeal(context.Context, *SendDealRequest) (*SendDealResponse, error)
	ValidateTransaction(context.Context, *ValidateRequest) (*ValidateResponse, error)
	ValidateBlock(context.Context, *ValidateRequest) (*ValidateResponse, error)
	mustEmbedUnimplementedOracleNodeServer()
}

// UnimplementedOracleNodeServer must be embedded to have forward compatible implementations.
type UnimplementedOracleNodeServer struct {
}

func (UnimplementedOracleNodeServer) SendDeal(context.Context, *SendDealRequest) (*SendDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeal not implemented")
}
func (UnimplementedOracleNodeServer) ValidateTransaction(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTransaction not implemented")
}
func (UnimplementedOracleNodeServer) ValidateBlock(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBlock not implemented")
}
func (UnimplementedOracleNodeServer) mustEmbedUnimplementedOracleNodeServer() {}

// UnsafeOracleNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleNodeServer will
// result in compilation errors.
type UnsafeOracleNodeServer interface {
	mustEmbedUnimplementedOracleNodeServer()
}

func RegisterOracleNodeServer(s grpc.ServiceRegistrar, srv OracleNodeServer) {
	s.RegisterService(&OracleNode_ServiceDesc, srv)
}

func _OracleNode_SendDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServer).SendDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iop.OracleNode/SendDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServer).SendDeal(ctx, req.(*SendDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleNode_ValidateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServer).ValidateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iop.OracleNode/ValidateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServer).ValidateTransaction(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleNode_ValidateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleNodeServer).ValidateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iop.OracleNode/ValidateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleNodeServer).ValidateBlock(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OracleNode_ServiceDesc is the grpc.ServiceDesc for OracleNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iop.OracleNode",
	HandlerType: (*OracleNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDeal",
			Handler:    _OracleNode_SendDeal_Handler,
		},
		{
			MethodName: "ValidateTransaction",
			Handler:    _OracleNode_ValidateTransaction_Handler,
		},
		{
			MethodName: "ValidateBlock",
			Handler:    _OracleNode_ValidateBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oraclenode.proto",
}
